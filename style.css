:root {
    --light-beige: #F5F3EF;
    --white: #FFFFFF;
    --gold: #FEBD2F;
    --ltgrey: #DCDCDC;
    --grey: #646464;
    --black: #000000;
    --backgroundcolor: #E5E5E5;
}

* {
    box-sizing: border-box;
}

body {
    background-color: var(--backgroundcolor);
}

h1 {
    font-family: 'Roboto Serif', serif;
    font-size: 64px;
    font-weight: 500;
}

h2 {
    font-family: 'Roboto Serif';
    font-size: 40px;
    font-weight: 500;
}
/* Great work on being detailed oriented and adding the right fonts to each component of the website. */
h3 {
    font-family: 'Roboto Serif';
    font-size: 24px;
    font-weight: 800;
}

p {
    font-family: 'Roboto';
    font-size: 18px;
}

/* Superb! You’ve used grid template areas correctly! */
.grid-container {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(4, 1fr);
    grid-template-areas:
    'header header header header'
    'bannerText bannerText image image'
    'cards cards cards cards'
    'cards cards cards cards'
    'footer footer footer footer'
    ;
}

/* Beautiful work on using CSS Grid and flex box together! */
.header {
grid-area: header;
display: flex;
justify-content: space-between;
margin: 0 15px 40px 15px;
}


a {
    text-decoration: none;
    padding-right: 25px;
    font-family: 'Roboto';
    font-size: 16px;
    font-weight: 500;
    color: var(--black);
}

.lines {
    display: none;
}

.start  {
    background-color: var(--black);
    color: var(--white);
    border-radius: 26px;
    font-size: 12px;
    border: none;
    padding: 10px 20px;
}


.bannerText {
   margin: 20px 10px;
    display: grid;
grid-area: bannerText;
}

/* The images aren’t responsive. You can give a % value to an image’s width to make it responsive to the screen size. */
.cooking-image {
grid-area: image;
}

/* Your page has horizontal scrolling. Your image is overflowing.
Set the width: 100%; so that your image is 100% of the parent and won't overflow. */
.cooking-image img {
    border-radius: 40px;

}

.cards-container {
grid-area: cards;
display: grid;
grid-template-columns: repeat(3, 1fr);
row-gap: 55px;
column-gap: 15px;
padding: 100px 20px;
}

.card1 {
width: 400px;
height: 324px;
border-radius: 40px;
background-color: var(--gold);
justify-self: center;
}

.card1 h2 {
    padding: 10px 40px 20px 30px;
}

/* Nice work on using Flexbox properly to create some of the components. */
.white-cards {
    background-color: var(--white);
    display: flex;
    border-radius: 40px;
    justify-self: center;
    box-shadow: 0px 2px 24px rgba(0, 0, 0, 0.05);
}
.white-cards button {
    border: 1px solid var(--ltgrey);
    background-color: var(--white);
    color: var(--black);
    font-weight: 600;
    margin-top: 35px;
    padding: 10px 20px;
    border-radius: 26px;
}

.card-text {
    justify-self: center;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: flex-start;
    padding: 40px;
}


/* Even-though it looks like you achieved placing the logo above the card, it is not the proper way.
You should give the icon a position of absolute, this will bring the icon out of the document flow.
Then you need to give the card a position of relative in order for the icon to be placed in relative to the card. */

/* When you make the position of the img to be absolute, you can move it by using the left, right, top, bottom css rules.
So instead of giving padding-left, you should give top: -20; right: 30px; */

.white-cards img {
    position: absolute;
    padding-left: 310px;
}

.footer img {
    height: 30px;
    align-self: center;
}

.footer {
    background-color: var(--gold);
    height: 50px;
    display: flex;
    justify-content: center;
grid-area: footer;
}